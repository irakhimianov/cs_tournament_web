# Generated by Django 5.2.5 on 2025-08-13 06:35

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='когда создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='когда обновлен')),
                ('telegram_id', models.CharField(db_index=True, max_length=255, verbose_name='ID в telegram')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='имя')),
                ('telegram_username', models.CharField(blank=True, max_length=255, verbose_name='имя пользователя в telegram')),
                ('contact', models.CharField(blank=True, help_text='Заполняется в случае отсутствия имени пользователя в telegram', max_length=255, verbose_name='контакт для связи')),
                ('sphere_work', models.TextField(blank=True, verbose_name='сфера')),
                ('vertical_work', models.TextField(blank=True, verbose_name='вертикаль')),
                ('steam_url', models.TextField(blank=True, verbose_name='ссылка на steam')),
                ('faceit_url', models.TextField(blank=True, verbose_name='ссылка на faceit')),
                ('faceit_level', models.IntegerField(default=0, verbose_name='уровень faceit')),
                ('agreed_at', models.DateTimeField(blank=True, null=True, verbose_name='когда принял правила')),
                ('questioned_at', models.DateTimeField(blank=True, null=True, verbose_name='когда прошел анкету')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='когда прошел проверку администратором')),
            ],
            options={
                'verbose_name': 'игрок',
                'verbose_name_plural': 'игроки',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='когда создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='когда обновлен')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='наименование')),
                ('finished_at', models.DateTimeField(blank=True, null=True, verbose_name='когда завершен')),
            ],
            options={
                'verbose_name': 'турнир',
                'verbose_name_plural': 'турниры',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='когда создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='когда обновлен')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='наименование')),
                ('invite_code', models.CharField(blank=True, db_index=True, editable=False, help_text='Уникальный код. Генерируется автоматически, для вступления игрока в команду по коду', max_length=255, verbose_name='пригласительный код')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_teams', to='league.player', verbose_name='создатель команды')),
            ],
            options={
                'verbose_name': 'команда',
                'verbose_name_plural': 'команды',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='TeamPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='когда создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='когда обновлен')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='league.player', verbose_name='игрок')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='league.team', verbose_name='команда')),
            ],
            options={
                'verbose_name': 'игрок команды',
                'verbose_name_plural': 'игроки команды',
                'ordering': ('id',),
                'constraints': [models.UniqueConstraint(fields=('team', 'player'), name='unique_team_player')],
            },
        ),
        migrations.CreateModel(
            name='TournamentPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='когда создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='когда обновлен')),
                ('confirmed_at', models.DateTimeField(blank=True, null=True, verbose_name='когда подтвердил свое участие')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournaments', to='league.player', verbose_name='игрок')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='league.tournament', verbose_name='турниры')),
            ],
            options={
                'verbose_name': 'участник турнира',
                'verbose_name_plural': 'участники турнира',
                'ordering': ('id',),
                'constraints': [models.UniqueConstraint(fields=('tournament', 'player'), name='unique_tournament_player')],
            },
        ),
    ]
